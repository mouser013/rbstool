using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
//using RedditSharp;
using System.Net.Http;
using System.Net;
//using CefSharp.WinForms;
using Newtonsoft.Json;

namespace redditBatchSubmitTool
{
    public partial class Form1 : Form
    {

        String code, token, subreddit, user, pass;
        //Reddit reddit;
        //RedditSharp.Things.AuthenticatedUser user;

        private void retrieveToken()
        {
            if (code == null)
                return;
            /*
            var request = (HttpWebRequest)WebRequest.Create("https://www.reddit.com/api/v1/access_token");
            var strData = "grant_type=authorization_code&code=" + code + "&redirect_uri=https://mouser013.github.io";
            var data = Encoding.UTF8.GetBytes(strData);

            request.Method = "POST";
            //request.ContentType = "application/x-www-form-urlencoded";
            request.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
            request.ContentLength = data.Length;
            request.UserAgent = "win.redditBST v.01";
            //request.Credentials = new NetworkCredential("bluemanscafe", "");
            request.PreAuthenticate = true;

            string svcCredentials = Convert.ToBase64String(Encoding.UTF8.GetBytes("bluemanscafe:"));
            //request.Headers.Add("Authorization", "Basic " + svcCredentials);
            request.Headers[HttpRequestHeader.Authorization] = string.Format("Basic {0}", svcCredentials);

            using(var stream = request.GetRequestStream())
                stream.Write(data, 0, data.Length);

            var response = (HttpWebResponse)request.GetResponse();
            var responseStr = new StreamReader(response.GetResponseStream()).ReadToEnd();
            */
            
            var values = new Dictionary<string, string>{
                {"grant_type","authorization_code"},
                {"code",code},
                {"redirect_uri","https://mouser013.github.io"},
            };
            IEnumerable<String> val;
            string svcCredentials = Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes("8DzA0_bx9X8hCA:"));
            client.DefaultRequestHeaders.Add("Authorization", "Basic " + svcCredentials);
            //client.DefaultRequestHeaders.TryGetValues("User-Agent", out val);
            //if (val == null)
            //    client.DefaultRequestHeaders.Add("User-Agent", "win.redditBST v.01");
            var content = new FormUrlEncodedContent(values);
            var response = client.PostAsync("https://www.reddit.com/api/v1/access_token", content).Result;
            var responseStr = response.Content.ReadAsStringAsync().Result;
            //using(var reader = new StreamReader(response.Content.ReadAsStreamAsync().Result))
            tokenresponse resp = JsonConvert.DeserializeObject<tokenresponse>(responseStr);
            Properties.Settings.Default.accessToken = resp.access_token;
            Properties.Settings.Default.refreshToken = resp.refresh_token;
            Properties.Settings.Default.tokenIssueTime = DateTime.Now;
            Properties.Settings.Default.Save();
        }

        private void refreshToken()
        {
            var values = new Dictionary<string, string>{
                {"grant_type","refresh_token"},
                {"refresh_token",Properties.Settings.Default.refreshToken},
            };
            string svcCredentials = Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes("8DzA0_bx9X8hCA:"));
            client.DefaultRequestHeaders.Add("Authorization", "Basic " + svcCredentials);
            //client.DefaultRequestHeaders.TryGetValues("User-Agent", out val);
            //if (val == null)
            //    client.DefaultRequestHeaders.Add("User-Agent", "win.redditBST v.01");
            var content = new FormUrlEncodedContent(values);
            var response = client.PostAsync("https://www.reddit.com/api/v1/access_token", content).Result;
            var responseStr = response.Content.ReadAsStringAsync().Result;
            //using(var reader = new StreamReader(response.Content.ReadAsStreamAsync().Result))
            tokenresponse resp = JsonConvert.DeserializeObject<tokenresponse>(responseStr);
            Properties.Settings.Default.accessToken = resp.access_token;
            Properties.Settings.Default.tokenIssueTime = DateTime.Now;
            Properties.Settings.Default.Save();
        }

        private bool checkAndRefreshToken()
        {
            if (Properties.Settings.Default.accessToken == "")
                return false;
            else
            {
                DateTime issue = Properties.Settings.Default.tokenIssueTime;
                issue.AddHours(1);
                if (DateTime.Now > issue)
                    refreshToken();
                return true;
            }
        }

        private async void submitUrl(String url, String title)
        {
            var values = new Dictionary<string, string>
            {
                {"title",title},
                {"url",url},
                {"sr",subreddit},
                {"kind","link"},
                {"uh",""}
            };
            IEnumerable<String> val;
            client.DefaultRequestHeaders.TryGetValues("Authorization",out val);
            if(val == null)
                client.DefaultRequestHeaders.Add("Authorization", "bearer " + token);
            client.DefaultRequestHeaders.TryGetValues("User-Agent", out val);
            if (val == null)
                client.DefaultRequestHeaders.Add("User-Agent", "win.redditBST v.01");
            var content = new FormUrlEncodedContent(values);
            var response = client.PostAsync("https://oauth.reddit.com/api/submit", content).Result;
            var responseStr = response.Content.ReadAsStringAsync().Result;
            textOut.AppendText(responseStr + '\n');
        }

        private void parseCode(String resUrl)
        {
            int start = resUrl.LastIndexOf('=') + 1, end = resUrl.Length;
            code = resUrl.Substring(start, end - start);
            Properties.Settings.Default.authCode = code;
        }

        private static readonly HttpClient client = new HttpClient();

        public Form1()
        {
            InitializeComponent();
            this.ActiveControl = panelAcc;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            if(checkAndRefreshToken())
            {
                panelMain.Show();
                panelAuth.Hide();
                panelAcc.Hide();
            }
            else
            {
                panelMain.Hide();
                panelAuth.Hide();
                panelAcc.Show();
            }
        }

        private void buttonSubmit_Click(object sender, EventArgs e)
        {
            String[] urls = textIn.Lines;
            String title = "no-title";
            subreddit = textSubreddit.Text;

            for (int i = 0; i < urls.Length; i++)
            {
                String url = urls[i];
                if(url.Contains("gfycat.com"))
                {
                    title = url.Substring(url.LastIndexOf('/') + 1);
                }
                submitUrl(url, title);
                textOut.AppendText(title + " : " + url + '\n'); 
            }
        }

        private void buttonLogin_Click(object sender, EventArgs e)
        {
            bool auth = false;
            //auth code
            //if(auth)
            {
                user = textUser.Text;
                pass = textPass.Text;
                //panelMain.Show();
                panelAuth.Show();
                panelAcc.Hide();
            }
            browserAuth.Navigate("https://www.reddit.com/api/v1/authorize?client_id=8DzA0_bx9X8hCA&response_type=code&state=akrnarvhburvbuyrirvb&redirect_uri=https://mouser013.github.io&duration=permanent&scope=identity submit");
        }

        private void browserAuth_Navigating(object sender, WebBrowserNavigatingEventArgs e)
        {
            //HtmlDocument doc = browserAuth.Document;
            //String res = e.Url.Fragment;
            //if(e.Url.Host == "127.0.0.1")
            {
                //panelAuth.Hide();
                //panelMain.Show();
                //textBrowser.AppendText(res+"\n");
                //textOut.AppendText(res);
            }
        }

        private void browserAuth_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            HtmlDocument doc = browserAuth.Document;
            //String res = doc.Url.AbsoluteUri;
            if(e.Url.Host == "mouser013.github.io")
            {
                String res = doc.Url.Query;
                parseCode(res);
                retrieveToken();
                panelAuth.Hide();
                panelMain.Show();
                //textBrowser.AppendText(res + "\n");
                textOut.AppendText(res);
                textOut.AppendText(code);
            }
        }
    }

    public class tokenresponse
    {
        public String access_token;
        public String token_type;
        public String expires_in;
        public String scope;
        public String refresh_token;
    };
}
